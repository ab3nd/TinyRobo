It looks like the first pass of the compiler would convert the user gestures in whatever format into some constant
JSON format, which I guess is my Intermediate Representation, and then the next pass would expand that into the 
set of avaialable primitives. The availability of primitives would be based on metaparameters to the compiler
that describe the abilities of the system, and implementations of primitives would be based on the parameters as well.
So e.g. finding an object might be a regular grid search, or brownian motion + beaconing, etc. 
This heuristic system would be based on work in the literature, so that e.g. traveling to a specfic point may only be
avaialable if global localization is available, or forming a circle may depend on various levels of robot sensing ability.
So I'll need implementations of each primitive, as e.g. GCPR rules, and a heuristic table for retreiving them
So I'll need a list of primitives and a set of taxonomies of swarm capabilities
Given a list of primitives, come up with an implmentation per combination of swarm abilities
or possibly implement as needed vs. determining it's not possible
Can have some complicated dependencies, like local shape formation may depend on or be limited by the ability to form a 
local coordinate system, which may in turn be limited by the ability to communicate or sense other robots. 
It may be possible to specify a logical representation of the depenencies, which would then be used to determine whether 
it is possible to generate the program. 

If there's a need to specify which robots get which programs, that's informed by user gestures, so it should happen as 
part of the IR generation, but before the primitive availability heuristics get used. 
That way also leaves it open to highly heterogeneous swarms, as they may end up with different primitive availabilities.



Primitives and their required abilities

	Edge-following (Kilobots)
		- orbit robots as in Stupid
		- which uses range and bearing

	Gradient Formation (Kilobots)
		- local communication

	Localization (local) (Kilobots)
	 	- as in Amorphous
	 	- lateral inhibition, which uses local communication

	Produce Coordinate System (Amorphous)
		- lateral inhibition
		- local communication

	Move Arc (Stupid)
		- Move the robot given a rotational and translational velocity
		- only requires that robot can move

	Move Stop and Move Forward (Stupid)
		- Special cases of Move Arc

	Avoid Obstacle
		- Sense obstacles
		- Move robot

	Orient To Robot (Stupid)
		- Rotate the active robot to a fixed bearing relative to a reference robot
		- Sense other robot bearing
			- or communicate with other robot and know own bearing

	Match Heading To Robot (Stupid)
		- Rotate the active robot to face the same direction as a reference robot
		- Sense other robot bearing and orientation
			- or communicate with other robot and know bearing and orientation

	Follow Robot (Stupid)
		- stay within a fixed radius of target robot
		- face the target robot
		- requires orient to robot 
		- requires range sense to other robot

	Avoid Robot (Stupid)
		- uses Orient relative to robot to orient away from it (fixed bearing is away)
        - uses Move Forward to move away from the other robot
        - uses distance sensing

	Orient for Orbit (Stupid)
		- get to the proper distance from reference robot
		- get to the proper heading for orienting (depending on orientation direction)
		- uses orientation and distance sensing

	Orbit Robot (Stupid)
		- sum of moving forward and orient for orbit

	Avoid Many Robots (Stupid)
		- stay more than a fixed distance from all robots
		- distance sensing
		- bearing is based on bearing to neighbors, so requires bearing sensing

	Disperse From Source (Stupid)
		- source robot doesn't move
		- all robots stay more than a fixed distance from any other robot
		- uses Avoid Many Robots until robot has no neighbors closer than fixed distance

	Disperse from Leaves (Stupid)
		- Leaf robots are all robots that are greater than the active robot's number of hops from the source
		- if any neighbors are leaves, move away from them using Avoid Many Robots
		- continue until no neighbors meet the criteria

	Disperse Uniformly (Stupid)
		- uses bearing of neighbors scaled by distance to determine new rotational and translational velocities

	Follow The Leader (Stupid)
		- Uses robot IDs

	Orbit Group (Stupid)
		- moves robot around a group of robots at a fixed offset from them
		- orbits closest reference robot (which changes as it moves)
		- bad if the robot is inside the group

	Navigate Gradient (Stupid)
		- get to no further than d from the source robot
		- uses the average bearing towards neighbors with lower hop counts from source
		- could be improved by getting directions from neighbors too

	Cluster on Source (Stupid)
        - follow neighbors with lower hop counts to source
        - assumes hop counts and movement, but that's about it

	Cluster Into Groups (Stupid)
		- customizable number of groups
		- laterally inhibit group leader selection
		- not clear exactly how groups are assigned initially

	Detect Edges (Stupid)
		- bearing differences to neighbors
		- walls are a special case, sometimes don't want them to be edges

	Morphogen Gradients and Position (Catalog)
		- Local communication

	Chemotaxis and Directional Information (Catalog)
		- Local communication
		- Morphogen gradients
        - Stupid robot tricks calls this Navigate Gradient

	Local Inhibition and Local Competition (Catalog)
		Local random process
		Local communication

	Lateral Inhibition and Spacing (Catalog)
		Same as Local inhibition (but with a limited range)

	Local Monitoring (Catalog)
		Local Communication

	Quorum Sensing and Counting (Catalog)
		Local Communication

	Checkpoings and Consensus (Catalog)
		Local communication

	Random Exploration and Selective Stabilization (Catalog)


I can get range and bearing sensing from communication
I can half-ass distance from communication
Once I have half-ass distance (hops) and communication, I can do lateral inhibition
Once I can do lateral inhibition, I can define a local coordinate frame
Once I have a local coordinate frame, I can do range and bearing by communication
	"I'm at x, y, where are you?"
	"I'm at x2, y2"
	"Ok, my bearing and range from you are b, d"
	"Ok, my bearing and range from you are b2, d2"

Catalog -> http://groups.csail.mit.edu/mac/users/radhi/nagpal-esoa03.pdf
Kilobots -> http://science.sciencemag.org/content/345/6198/795.full
Amorphous -> http://dl.acm.org/citation.cfm?id=332842
Programming -> https://ocs.aaai.org/Papers/Symposia/Spring/2003/SS-03-02/SS03-02-024.pdf (Nagpal on OSL)
Stupid -> https://people.csail.mit.edu/jamesm/publications/
	Assumes local comms, reliable but possibly losing messages, UUIDs
McLurkin-SM-MIT-2004(72dpi).pdf

Behaviors and their primitives

	Boid-style flocking
		- essentially cluster on source with a moving source

	Foraging Search
		- consists of moving randomly when nothing is available, switching to directed when resource is available
		- distribute uniformly or distribute randomly, but spread out
		- beacon when found
		- move to beacons
		- need to be able to detect the resource/target

	Source Search 
		- need to be able to detect source
		- cluster on source
		- limit cluster size by e.g. counting neighbors, leaving if can't get closer than n hops to source, lateral-inhibition style methods

	Moving to a specified object
		- with no comms, move randomly until reached and then stop
		- with coms, this is source search

	Moving to a specified location
		- source search, sort of, but need to know the location
		- If I have the swarm perform coordinate system mapping, then it's converting from UI into swarm coordinates
		- Inaccuracy will be an issue

	Aggregation (Scholar, SwarmEng)
		- Cluster on source, on robot, etc. 

	Pattern Formation (Scholar, SwarmEng)

	Chain Formation (Scholar, SwarmEng)
		Covered in McLurkin
		- Between two robots
			- Form spanning tree, get shortest path
			- move to / cluster on path

	Self-Assembly (Scholar, SwarmEng)
		- Usually for modular robots
		- Covered  in kilobots paper, uses
			- Localization (based on comms and distance measurement)
			- gradient formation
			- edge-following

	Object Clustering/Assembling (Scholar, SwarmEng)
		- seach as above for things
		- cluster on source robot

	Collective Exploration (Scholar, SwarmEng)
		- combination of boid swarming and exploration
		- exploring usually refers to detecting unentered area
		- form a coordinate system, check coverage, move accordingly?
			- fill poorly covered areas
		- edge detection used to elect new leaders
			- pick an edge robot, have others cluster on/diffuse from it
			- repeat to keep expanding in a given direction

	Collective Motion (Scholar, SwarmEng)
		- aka boid flocking

	Collective Transport (Scholar, SwarmEng)
		- if object dimensions are known, all robots have to stay at least less than that dimension apart
		- object can be measured (sort-of) if it's surrounded, by robots integrating distance reports around it
		- they can also detect not surrounding it by any robot failing to see a next robot to message to
		- can also generate localization coordinates, and then push only on the right side of the object to move it
	Consensus Generation (Scholar, SwarmEng)
		- As with quorum sensing or lateral inhibition, a la nagpal

	Allocation to Tasks (Scholar, SwarmEng)
		- McLurkin covers division into groups
		- Nagpal covers quorum generation


	Fault detection (Scholar, SwarmEng)

	Group Size Regulation (Scholar, SwarmEng)


Scholar -> http://www.scholarpedia.org/article/Swarm_robotics#Collective_behaviors
Same author as Swarm Eng

Scholar lists 5 categories
	1. Spatially organizing
	2. navigation
	3. decision-making
	4. human interaction <- stuff like gesture recognition or receiving commands
	5. other <- really? That's a category?

Review -> An Extensive Review of Research in Swarm Robotics
Yogeswaran Mohan, S. G. Ponnambalam
	Lists search, retrieve, deposit, return, rest as ant behaviors
	Has kind of a taxonomy of research areas in swarms

SwarmEng -> Swarm robotics: a review from the swarm engineering perspective
Manuele Brambilla · Eliseo Ferrante · Mauro Birattari · Marco Dorigo

A Taxonomy for Swarm Robots
G. Dudek, M. Jenkin, E. Milios, D. Wilkes
	Size
		1 robot
		Pair
		N small relative to task or env
		Effectively infinite
	Communication Range
		None
		Local
		Global
	Comminication Topology
		Broadcast
		Addressed
		Tree
		Graph
	Communication Bandwidth
		High - cost is negligible
		Motion - cost is on par with moving
		Low - cost is worse than moving
		Zero - No communication
	Configurability
		Static arrangement in space
		Coordinated rearrangement with communication
		Dynamic arrangement, anyone can go anywhere
	Unit processing ability
		Summation
		Finite State Automata
		Push-down automata
		Turing machine <- Most robots
	Composition (applies to hardware and software, so same hardware/different software is a thing)
		Heterogeneous
		Homogeneous

Iocchi Taxonomy
	Levels
		1. Cooperation (or not)
		2. Cooperating: aware of each other or not
		3. Cooperating and aware: strongly, weakly, or not coordinated
		4. Cooperating, aware, and strongly coordinated: Strongly, weakly, or not centralized

An Introduction to Swarm Robotics
Iñaki Navarro and Fernando Matía
	Cites some implementations of various swarm behaviors

Swarm Robotics: From Sources of
Inspiration to Domains of Application
Erol Sahin
	"As our starting point, we propose the following definition for the term swarm robotics: Swarm
robotics is the study of how large number of relatively simple physically embodied agents can be
designed such that a desired collective behavior emerges from the local interactions among agents
and between the agents and the environment."
	Good definition, that

