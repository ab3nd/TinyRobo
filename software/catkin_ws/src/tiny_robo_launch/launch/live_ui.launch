
<launch>
	<arg name="cam_name" value="overhead_cam" />
	<arg name="GST10" value="true" />

	<!-- Start the GSCAM node -->
	<!-- Note that some settings of videocrop will cause a double-free error -->
	<!-- ! videocrop top=200 left=10 right=30 bottom=20 -->
	<env name="GSCAM_CONFIG" value="v4l2src device=/dev/video1 ! ffmpegcolorspace " />
	<node pkg="gscam" type="gscam" name="$(arg cam_name)">
	      <param name="camera_name" value="$(arg cam_name)" />
	      <param name="camera_info_url" value="file:///$(find camera_cal)/usb_cam_1024x768.yml" />
	      <remap from="camera/image_raw" to="$(arg cam_name)/image_raw" />
	</node>

	<!-- Video un-distorting -->
	<node name="image_proc" pkg="image_proc" type="image_proc" ns="$(arg cam_name)"/>

	<!-- Video cropping -->
	<node pkg="nodelet" type="nodelet" args="standalone image_proc/crop_decimate" name="crop_img">
		<param name="x_offset" type="int" value="0" />
		<param name="y_offset" type="int" value="120" />
		<param name="width" type="int" value="1024" />
		<param name="height" type="int" value="684" />

		<!-- remap input topics -->
		<remap from="camera/image_raw" to="overhead_cam/image_rect_color"/>
		<remap from="camera/image_info" to="overhead_cam/camera_info"/>

		<!-- remap output topics -->
		<remap from="camera_out/image_raw" to="camera_crop/image_rect_color"/>
		<remap from="camera_out/image_info" to="camera_crop/camera_info"/>
	</node>

	<!-- Video resizing -->
	<node pkg="nodelet" type="nodelet" args="standalone image_proc/resize" name="resize_img">
		<!-- remap input topics -->
		<remap from="image" to="camera_crop/image_rect_color"/>
		<remap from="camera_info" to="camera_crop/camera_info"/>

		<!-- remap output topics -->
		<remap from="resize_image/image" to="camera_resize/image_rect_color"/>
		<remap from="resize_image/camera_info" to="camera_resize/camera_info"/>
	</node>

	<!-- Dynamic reconfigure the resizing nodelet -->
	<node name="$(anon dynparam)" pkg="dynamic_reconfigure" type="dynparam" args="set_from_parameters resize_img">
	 	  <param name="use_scale" type="int" value="0" />
		  <param name="width" type="int" value="1680" />
		  <param name="height" type="int" value="1050" />
	 </node>

	<!-- Same stuff, but in mono for april tags -->
	<!-- Video cropping -->
	<node pkg="nodelet" type="nodelet" args="standalone image_proc/crop_decimate" name="crop_img_mono">
		<param name="x_offset" type="int" value="0" />
		<param name="y_offset" type="int" value="120" />
		<param name="width" type="int" value="1024" />
		<param name="height" type="int" value="684" />

		<!-- remap input topics -->
		<remap from="camera/image_raw" to="overhead_cam/image_rect"/>
		<remap from="camera/image_info" to="overhead_cam/camera_info"/>

		<!-- remap output topics -->
		<remap from="camera_out/image_raw" to="camera_crop_mono/image_rect"/>
		<remap from="camera_out/image_info" to="camera_crop_mono/camera_info"/>
	</node>

	<!-- Video resizing -->
	<node pkg="nodelet" type="nodelet" args="standalone image_proc/resize" name="resize_img_mono">
		<!-- remap input topics -->
		<remap from="image" to="camera_crop_mono/image_rect"/>
		<remap from="camera_info" to="camera_crop_mono/camera_info"/>

		<!-- remap output topics -->
		<remap from="resize_img_mono/image" to="camera_resize_mono/image_rect"/>
		<remap from="resize_img_mono/camera_info" to="camera_resize_mono/camera_info"/>
	</node>

	<!-- Dynamic reconfigure the resizing nodelet -->
	<node name="$(anon dynparam_mono)" pkg="dynamic_reconfigure" type="dynparam" args="set_from_parameters resize_img_mono">
	 	  <param name="use_scale" type="int" value="0" />
		  <param name="width" type="int" value="1680" />
		  <param name="height" type="int" value="1050" />
	 </node>


	<!-- Fiducial tags -->
	<include file="$(find tiny_robo_launch)/launch/april_tags.launch" />

	<!-- Fake laser readings --> 
	<node pkg="laser_oracle" type="laser_oracle_server.py" name="fake_laser_service" output="screen"/>

	<!-- Distance oracle -->
	<node pkg="distance_oracle" type="distance_oracle_server.py" name="fake_range_service" output="screen"/>

	<!-- Bearing oracle -->
	<node pkg="bearing_oracle" type="bearing_oracle_server.py" name="fake_bearing_service" output="screen"/>

	<!-- Camera position in the world -->
	<node pkg="tf" type="static_transform_publisher" name="world_broadcaster" args="1.220 0.637 1.4 0 1 0 0 world_base camera_frame 50" />

	<!-- Attempt to clean up skips in contact -->
	<node name="destutter" pkg="user_interface" type="destutter.py" output="screen" required="true"/>

	<!-- Launch the user interface -->
	<node name="ui" pkg="user_interface" type="real_ui_input_layer.py" required="true" output="screen">
		<param name="overhead_cam" value="/resize_img/image" />
	</node>

	<!-- Checker for box selection gestures -->
	<node name="box_detector" pkg="user_interface" type="box_select_detector.py" required="true" output="screen" />

	<!-- Lasso selection gestures -->
	<node name="lasso_detector" pkg="user_interface" type="lasso_select_detector.py" required="true" output="screen" />

	<!-- Tap selection gestures -->
	<node name="tap_detector" pkg="user_interface" type="tap_select_detector.py" required="true" output="screen" />

	<!-- Tap waypoint gestures -->
	<node name="waypoint_detector" pkg="user_interface" type="tap_waypoint_detector.py" required="true" output="screen" />

	<!-- Paths that are not selections -->
	<node name="path_detector" pkg="user_interface" type="path_detector.py" required="true" output="screen" />

	<!-- Debug node that dumps everything to pictures -->
	<node name="dbg_vis" pkg="user_interface" type="gesture_debugger.py" required="true" output="screen" />
	
	<!-- Converts pixel locations to meter locations -->
	<node name="point_translator" pkg="robot_drivers" type="point_mapper_svc.py" output="screen"/>


	<node name="compiler" pkg="compiler" type="gcpr_gen_node.py" required="true" output="screen"/>

</launch>